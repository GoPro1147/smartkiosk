{"ast":null,"code":"var AWS = require('../core');\n\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\n\nvar ENV_REGIONAL_ENDPOINT_ENABLED = 'AWS_STS_REGIONAL_ENDPOINTS';\nvar CONFIG_REGIONAL_ENDPOINT_ENABLED = 'sts_regional_endpoints';\nAWS.util.update(AWS.STS.prototype, {\n  /**\r\n   * @overload credentialsFrom(data, credentials = null)\r\n   *   Creates a credentials object from STS response data containing\r\n   *   credentials information. Useful for quickly setting AWS credentials.\r\n   *\r\n   *   @note This is a low-level utility function. If you want to load temporary\r\n   *     credentials into your process for subsequent requests to AWS resources,\r\n   *     you should use {AWS.TemporaryCredentials} instead.\r\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\r\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\r\n   *   @param credentials [AWS.Credentials] an optional credentials object to\r\n   *     fill instead of creating a new object. Useful when modifying an\r\n   *     existing credentials object from a refresh call.\r\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\r\n   *     loaded from a raw STS operation response.\r\n   *   @example Using credentialsFrom to load global AWS credentials\r\n   *     var sts = new AWS.STS();\r\n   *     sts.getSessionToken(function (err, data) {\r\n   *       if (err) console.log(\"Error getting credentials\");\r\n   *       else {\r\n   *         AWS.config.credentials = sts.credentialsFrom(data);\r\n   *       }\r\n   *     });\r\n   *   @see AWS.TemporaryCredentials\r\n   */\n  credentialsFrom: function credentialsFrom(data, credentials) {\n    if (!data) return null;\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n    return credentials;\n  },\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\n  },\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\n  },\n\n  /**\r\n   * @api private\r\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('validate', this.optInRegionalEndpoint, true);\n  },\n\n  /**\r\n   * @api private\r\n   */\n  optInRegionalEndpoint: function optInRegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: ENV_REGIONAL_ENDPOINT_ENABLED,\n      sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,\n      clientConfig: 'stsRegionalEndpoints'\n    });\n\n    if (config.stsRegionalEndpoints === 'regional' && service.isGlobalEndpoint) {\n      //client will throw if region is not supplied; request will be signed with specified region\n      if (!config.region) {\n        throw AWS.util.error(new Error(), {\n          code: 'ConfigError',\n          message: 'Missing region in config'\n        });\n      }\n\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      var regionalEndpoint = config.endpoint.substring(0, insertPoint) + '.' + config.region + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n      req.httpRequest.region = config.region;\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/multicampus/git/s02p13c103/web/node_modules/aws-sdk/lib/services/sts.js"],"names":["AWS","require","resolveRegionalEndpointsFlag","ENV_REGIONAL_ENDPOINT_ENABLED","CONFIG_REGIONAL_ENDPOINT_ENABLED","util","update","STS","prototype","credentialsFrom","data","credentials","TemporaryCredentials","expired","accessKeyId","Credentials","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expireTime","Expiration","assumeRoleWithWebIdentity","params","callback","makeUnauthenticatedRequest","assumeRoleWithSAML","setupRequestListeners","request","addListener","optInRegionalEndpoint","req","service","config","stsRegionalEndpoints","_originalConfig","env","sharedConfig","clientConfig","isGlobalEndpoint","region","error","Error","code","message","insertPoint","endpoint","indexOf","regionalEndpoint","substring","httpRequest","updateEndpoint"],"mappings":"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","sourcesContent":["var AWS = require('../core');\r\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\r\nvar ENV_REGIONAL_ENDPOINT_ENABLED = 'AWS_STS_REGIONAL_ENDPOINTS';\r\nvar CONFIG_REGIONAL_ENDPOINT_ENABLED = 'sts_regional_endpoints';\r\n\r\nAWS.util.update(AWS.STS.prototype, {\r\n  /**\r\n   * @overload credentialsFrom(data, credentials = null)\r\n   *   Creates a credentials object from STS response data containing\r\n   *   credentials information. Useful for quickly setting AWS credentials.\r\n   *\r\n   *   @note This is a low-level utility function. If you want to load temporary\r\n   *     credentials into your process for subsequent requests to AWS resources,\r\n   *     you should use {AWS.TemporaryCredentials} instead.\r\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\r\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\r\n   *   @param credentials [AWS.Credentials] an optional credentials object to\r\n   *     fill instead of creating a new object. Useful when modifying an\r\n   *     existing credentials object from a refresh call.\r\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\r\n   *     loaded from a raw STS operation response.\r\n   *   @example Using credentialsFrom to load global AWS credentials\r\n   *     var sts = new AWS.STS();\r\n   *     sts.getSessionToken(function (err, data) {\r\n   *       if (err) console.log(\"Error getting credentials\");\r\n   *       else {\r\n   *         AWS.config.credentials = sts.credentialsFrom(data);\r\n   *       }\r\n   *     });\r\n   *   @see AWS.TemporaryCredentials\r\n   */\r\n  credentialsFrom: function credentialsFrom(data, credentials) {\r\n    if (!data) return null;\r\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\r\n    credentials.expired = false;\r\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\r\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\r\n    credentials.sessionToken = data.Credentials.SessionToken;\r\n    credentials.expireTime = data.Credentials.Expiration;\r\n    return credentials;\r\n  },\r\n\r\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\r\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\r\n  },\r\n\r\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\r\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  setupRequestListeners: function setupRequestListeners(request) {\r\n    request.addListener('validate', this.optInRegionalEndpoint, true);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  optInRegionalEndpoint: function optInRegionalEndpoint(req) {\r\n    var service = req.service;\r\n    var config = service.config;\r\n    config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {\r\n      env: ENV_REGIONAL_ENDPOINT_ENABLED,\r\n      sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,\r\n      clientConfig: 'stsRegionalEndpoints'\r\n    });\r\n    if (\r\n      config.stsRegionalEndpoints === 'regional' &&\r\n      service.isGlobalEndpoint\r\n    ) {\r\n      //client will throw if region is not supplied; request will be signed with specified region\r\n      if (!config.region) {\r\n        throw AWS.util.error(new Error(),\r\n          {code: 'ConfigError', message: 'Missing region in config'});\r\n      }\r\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\r\n      var regionalEndpoint = config.endpoint.substring(0, insertPoint) +\r\n        '.' + config.region + config.endpoint.substring(insertPoint);\r\n      req.httpRequest.updateEndpoint(regionalEndpoint);\r\n      req.httpRequest.region = config.region;\r\n    }\r\n  }\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\multicampus\\\\git\\\\s02p13c103\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\multicampus\\\\git\\\\s02p13c103\\\\web\\\\src\\\\pages\\\\auth\\\\auth-go.jsx\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Layout from \"../../layout/Layout\";\nimport Webcam from \"react-webcam\";\nimport Popup from \"reactjs-popup\";\nimport Content from \"../../content/content\";\n\nvar AWS = require(\"aws-sdk\");\n\nconst videoConstraints = {\n  width: 1280,\n  height: 720,\n  facingMode: \"user\"\n};\nconst cfg = {\n  region: \"us-west-2\",\n  upload_bucket_name: \"rekognition-stack-demo-s3upload-1gezpp4hs4cul\",\n  identity_pool_id: \"us-west-2:811ae595-f007-467f-919f-0056e4a81b3b\",\n  face_collection: \"rekognition-demo-go\",\n  ddb_table: \"rekognition-demo-go\"\n};\nvar bucketName = cfg.upload_bucket_name;\nvar face_collection = cfg.face_collection;\nvar table = cfg.ddb_table; // Define AWS Resources\n\nvar region = cfg.region;\nvar creds = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: cfg.identity_pool_id\n});\nAWS.config.update({\n  region: region,\n  credentials: creds\n});\nvar rekognition = new AWS.Rekognition({\n  apiVersion: \"2016-06-27\"\n});\nvar docClient = new AWS.DynamoDB.DocumentClient();\nvar identityId = AWS.config.credentials.identityId;\n\nvar fill_metadata = function (FaceMatches) {\n  var temp_faces = [];\n  var i;\n};\n\nvar s3 = new AWS.S3({\n  apiVersion: \"2006-03-01\",\n  params: {\n    Bucket: bucketName\n  }\n});\n\nconst AuthPage = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        issmile = _useState2[0],\n        setIssmile = _useState2[1];\n\n  const index = 0;\n  var imageSrc;\n  const webcamRef = React.useRef(null);\n  const capture = React.useCallback(() => {\n    imageSrc = getBinary(webcamRef.current.getScreenshot());\n    console.log(imageSrc);\n    trackEmotions();\n  }, [webcamRef]);\n\n  function getBinary(encodedFile) {\n    var base64Image = encodedFile.split(\"data:image/jpeg;base64,\")[1];\n    var binaryImg = atob(base64Image);\n    var length = binaryImg.length;\n    var ab = new ArrayBuffer(length);\n    var ua = new Uint8Array(ab);\n\n    for (var i = 0; i < length; i++) {\n      ua[i] = binaryImg.charCodeAt(i);\n    }\n\n    var blob = new Blob([ab], {\n      type: \"image/jpeg\"\n    });\n    return ab;\n  }\n\n  function onTimeout() {\n    console.log(\"얼굴 탐색 시작한다..\");\n    var paramsForFace = {\n      CollectionId: face_collection,\n      FaceMatchThreshold: 80,\n      Image: {\n        Bytes: imageSrc\n      },\n      MaxFaces: 10\n    };\n    rekognition.searchFacesByImage(paramsForFace, function (err, data) {\n      if (err) {\n        //다시 interval가자.\n        console.log(\"error낫디\" + err);\n      } else {\n        console.log(data);\n\n        if (data && data.FaceMatches && data.FaceMatches.length) {\n          console.log(\"면상 일치한다!!\");\n          setIssmile(true); // console.log(fill_metadata(data.FaceMatches));\n\n          console.log(data.FaceMatches);\n        }\n      }\n    });\n  }\n\n  const trackEmotions = () => {\n    var smileOrNot = false;\n    console.log(\"감정 분석 들어갑니다.\");\n    var params = {\n      Attributes: [\"ALL\"],\n      Image: {\n        Bytes: imageSrc\n      }\n    };\n    rekognition.detectFaces(params, function (err, data) {\n      if (err) {\n        console.log(\"얼굴 인식 ERROR\");\n        console.log(err);\n      } else {\n        console.log(data);\n        console.log(data.FaceDetails[0].Smile);\n        var smile = data.FaceDetails[0].Smile;\n        console.log(smile.Value);\n\n        if (smile.Value === true) {\n          smileOrNot = true;\n          onTimeout(); //setIssmile(true);\n\n          console.log(\"너는 웃고 있다..\"); //페이지 이동.\n        } else {}\n      }\n    });\n  };\n\n  const ChangeComp = () => {\n    if (issmile) {\n      return React.createElement(React.Fragment, null, React.createElement(Redirect, {\n        to: \"/Order\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Webcam, {\n        audio: false,\n        height: 720,\n        ref: webcamRef,\n        screenshotFormat: \"image/jpeg\",\n        width: 1280,\n        videoConstraints: videoConstraints,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: capture,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Capture photo\"));\n    }\n  };\n\n  return React.createElement(ChangeComp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }); // <Layout>\n  //   <Webcam\n  //     audio={false}\n  //     height={720}\n  //     ref={webcamRef}\n  //     screenshotFormat=\"image/jpeg\"\n  //     width={1280}\n  //     videoConstraints={videoConstraints}\n  //   />\n  //   <button onClick={capture}>Capture photo</button>\n  // </Layout>\n};\n\nexport default AuthPage;","map":{"version":3,"sources":["C:/Users/multicampus/git/s02p13c103/web/src/pages/auth/auth-go.jsx"],"names":["React","useState","Redirect","Button","Layout","Webcam","Popup","Content","AWS","require","videoConstraints","width","height","facingMode","cfg","region","upload_bucket_name","identity_pool_id","face_collection","ddb_table","bucketName","table","creds","CognitoIdentityCredentials","IdentityPoolId","config","update","credentials","rekognition","Rekognition","apiVersion","docClient","DynamoDB","DocumentClient","identityId","fill_metadata","FaceMatches","temp_faces","i","s3","S3","params","Bucket","AuthPage","props","issmile","setIssmile","index","imageSrc","webcamRef","useRef","capture","useCallback","getBinary","current","getScreenshot","console","log","trackEmotions","encodedFile","base64Image","split","binaryImg","atob","length","ab","ArrayBuffer","ua","Uint8Array","charCodeAt","blob","Blob","type","onTimeout","paramsForFace","CollectionId","FaceMatchThreshold","Image","Bytes","MaxFaces","searchFacesByImage","err","data","smileOrNot","Attributes","detectFaces","FaceDetails","Smile","smile","Value","ChangeComp"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Layout from \"../../layout/Layout\";\r\nimport Webcam from \"react-webcam\";\r\nimport Popup from \"reactjs-popup\";\r\nimport Content from \"../../content/content\";\r\nvar AWS = require(\"aws-sdk\");\r\nconst videoConstraints = {\r\n  width: 1280,\r\n  height: 720,\r\n  facingMode: \"user\"\r\n};\r\nconst cfg = {\r\n  region: \"us-west-2\",\r\n  upload_bucket_name: \"rekognition-stack-demo-s3upload-1gezpp4hs4cul\",\r\n  identity_pool_id: \"us-west-2:811ae595-f007-467f-919f-0056e4a81b3b\",\r\n  face_collection: \"rekognition-demo-go\",\r\n  ddb_table: \"rekognition-demo-go\"\r\n};\r\nvar bucketName = cfg.upload_bucket_name;\r\nvar face_collection = cfg.face_collection;\r\nvar table = cfg.ddb_table;\r\n// Define AWS Resources\r\nvar region = cfg.region;\r\nvar creds = new AWS.CognitoIdentityCredentials({\r\n  IdentityPoolId: cfg.identity_pool_id\r\n});\r\n\r\nAWS.config.update({\r\n  region: region,\r\n  credentials: creds\r\n});\r\n\r\nvar rekognition = new AWS.Rekognition({ apiVersion: \"2016-06-27\" });\r\nvar docClient = new AWS.DynamoDB.DocumentClient();\r\n\r\nvar identityId = AWS.config.credentials.identityId;\r\nvar fill_metadata = function(FaceMatches) {\r\n  var temp_faces = [];\r\n  var i;\r\n};\r\nvar s3 = new AWS.S3({\r\n  apiVersion: \"2006-03-01\",\r\n  params: { Bucket: bucketName }\r\n});\r\nconst AuthPage = props => {\r\n  const [issmile, setIssmile] = useState(false);\r\n  const index = 0;\r\n  var imageSrc;\r\n  const webcamRef = React.useRef(null);\r\n  const capture = React.useCallback(() => {\r\n    imageSrc = getBinary(webcamRef.current.getScreenshot());\r\n    console.log(imageSrc);\r\n    trackEmotions();\r\n  }, [webcamRef]);\r\n  function getBinary(encodedFile) {\r\n    var base64Image = encodedFile.split(\"data:image/jpeg;base64,\")[1];\r\n    var binaryImg = atob(base64Image);\r\n    var length = binaryImg.length;\r\n    var ab = new ArrayBuffer(length);\r\n    var ua = new Uint8Array(ab);\r\n    for (var i = 0; i < length; i++) {\r\n      ua[i] = binaryImg.charCodeAt(i);\r\n    }\r\n\r\n    var blob = new Blob([ab], {\r\n      type: \"image/jpeg\"\r\n    });\r\n\r\n    return ab;\r\n  }\r\n  function onTimeout() {\r\n    console.log(\"얼굴 탐색 시작한다..\");\r\n\r\n    var paramsForFace = {\r\n      CollectionId: face_collection,\r\n      FaceMatchThreshold: 80,\r\n      Image: {\r\n        Bytes: imageSrc\r\n      },\r\n      MaxFaces: 10\r\n    };\r\n    rekognition.searchFacesByImage(paramsForFace, function(err, data) {\r\n      if (err) {\r\n        //다시 interval가자.\r\n        console.log(\"error낫디\" + err);\r\n      } else {\r\n        console.log(data);\r\n        if (data && data.FaceMatches && data.FaceMatches.length) {\r\n          console.log(\"면상 일치한다!!\");\r\n          setIssmile(true);\r\n          // console.log(fill_metadata(data.FaceMatches));\r\n          console.log(data.FaceMatches);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  const trackEmotions = () => {\r\n    var smileOrNot = false;\r\n\r\n    console.log(\"감정 분석 들어갑니다.\");\r\n    var params = {\r\n      Attributes: [\"ALL\"],\r\n      Image: {\r\n        Bytes: imageSrc\r\n      }\r\n    };\r\n    rekognition.detectFaces(params, function(err, data) {\r\n      if (err) {\r\n        console.log(\"얼굴 인식 ERROR\");\r\n        console.log(err);\r\n      } else {\r\n        console.log(data);\r\n        console.log(data.FaceDetails[0].Smile);\r\n        var smile = data.FaceDetails[0].Smile;\r\n\r\n        console.log(smile.Value);\r\n        if (smile.Value === true) {\r\n          smileOrNot = true;\r\n          onTimeout();\r\n          //setIssmile(true);\r\n          console.log(\"너는 웃고 있다..\");\r\n          //페이지 이동.\r\n        } else {\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const ChangeComp = () => {\r\n    if (issmile) {\r\n      return (\r\n        <>\r\n          <Redirect to=\"/Order\" />\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <Layout>\r\n          <Webcam\r\n            audio={false}\r\n            height={720}\r\n            ref={webcamRef}\r\n            screenshotFormat=\"image/jpeg\"\r\n            width={1280}\r\n            videoConstraints={videoConstraints}\r\n          />\r\n          <br></br>\r\n          <Button color=\"primary\" variant=\"contained\" onClick={capture}>\r\n            Capture photo\r\n          </Button>\r\n        </Layout>\r\n      );\r\n    }\r\n  };\r\n  return <ChangeComp />;\r\n  // <Layout>\r\n  //   <Webcam\r\n  //     audio={false}\r\n  //     height={720}\r\n  //     ref={webcamRef}\r\n  //     screenshotFormat=\"image/jpeg\"\r\n  //     width={1280}\r\n  //     videoConstraints={videoConstraints}\r\n  //   />\r\n  //   <button onClick={capture}>Capture photo</button>\r\n  // </Layout>\r\n};\r\n\r\nexport default AuthPage;\r\n"]},"metadata":{},"sourceType":"module"}